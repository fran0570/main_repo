.container {
    background-color: bisque;
    /* declared as a grid, all children become grid items */
    display: grid;
    /* Use the grid-template-columns property to define colmns */
    /* grid-template-columns: 1fr 1fr 1fr; */
    grid-template-columns: 1fr;
}

.grid-container {
    background-color: rgb(219, 219, 216);
    border-radius: 5px;
    border: 1px solid black;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 100px;

    /* row-gap: 1em; */
    /* column-gap: 2em; */
    /* Shorthand for the gap properties seen abobe. First number =  row gap the 2nd number = colum gap */
    gap: 1em 2em;
}

.box1 {
    /* grid-column-start: 1; */
    /* grid-column-end: 4;  or you can use : span 3;*/
    /* grid-row-start: 1; */
    /* grid-row-end: 3; or you can use : span 2; */
    /* Shorthand property for the above 4 lines */
    /* grid-column: 1 / 4; or you can use : span 3; */
    /* grid-row: 1 / 3; or you can use : span 2; */
    /* Utra shorthand for the same 4 lines */
    grid-area: 1 / 1 / 3 / 4;
}

.box2 {
    grid-column-start: 1;
    grid-row-start: 3;
    grid-row-end: 5;
}

.box {
    background-color: rgb(134, 169, 235);
    border: 2px solid grey;
    border-radius:  5px;
    display: grid;
    justify-content: center;
    align-items: center;
}

.gallery {
    background-color: cornflowerblue;
    display: grid;
    /* grid allowes you to set the follwing parameters in the parent instead of in the child .pic */
    grid-template-columns: repeat(5, minmax(150px, 1fr));
    grid-gap: 10px;
    /* auto = implicitly setting the height inside the rows */
    grid-auto-rows: 150px;

    /* Grid auto automatic packing algorythms we can to controle the flow of items in our grid where items are located */
    /* default */
    /* grid-auto-flow: row; */
    /* when running out of spcace it adds columns to anything beyound what we set it to ie.: 5 in this case */
    /* grid-auto-flow: column; */
    /* finds any empty areas and add items to fit in those areas */
    grid-auto-flow: dense;

}

.pic {
    font-weight: 700;
    font-family: sans-serif;
    background-color: cornsilk;
    display: grid;
    justify-content: center;
    align-items: center;
}

.pic:nth-child(3n) {
    background-color: darksalmon;
    grid-column: span 2;
    grid-row: span 2;
}

.grid-wrapper {
    background-color: antiquewhite;
    display: grid;
    grid-template-columns: 1fr;

    grid-template-areas: 
    "header"
    "nav"
    "main"
    "footer";
}

header {
    background-color: cadetblue;
    /* defining this item with the grid area name of header */
    grid-area: header;
}

nav {
    background-color: cornflowerblue;
    /* defining this item with the grid area name of nav */
    grid-area: nav;
}

main {
    background-color:  beige;
    /* defining this item with the grid area name of main */
    grid-area: main;
}

footer {
    background-color: cadetblue;
    /* defining this item with the grid area name of footer */
    grid-area: footer;
}

@media screen and (min-width: 768px) {
    .container {
        grid-template-columns: 2fr 1fr;
    }
    
    .grid-wrapper {
        grid-template-areas: 
        "header header"
        "nav nav"
        "main main"
        "footer footer";

        grid-template-columns: 1fr 1fr;
    }
}

@media screen and (min-width: 980px){
    .container{
        grid-template-columns: 500px 1fr 1fr;
    }

    .grid-wrapper {
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-areas: 
        "header header header"
        "nav main main"
        "nav main main"
        "footer footer footer"
        ;
    }
}

@media screen and (min-width: 1200px) {
    .container{
        grid-template-columns: repeat(4, 1fr);
    }
}
